# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
run-name: ${{ inputs.environment }}

on:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to deploy to'
        required: true
        default: 'Test'
        type: choice
        options:
          - Test
          - Int
          - E2E
          - Prod
      tag:
        description: 'Tag name for the docker image'
        required: false
        default: 'latest'
        type: string

env:
 image_name: academy2
 tag_name: "${{ inputs.tag }}-${{ inputs.environment }}"
 artifact_name: file

jobs:
  matrix:
    runs-on: ubuntu-latest

    steps:
      - id: set_matrix
        run: |
          MATRIX_JSON='{
            "include": [
              { "arch": "linux/arm64", "arch_name": "arm64" , "machine": "ubuntu-24.04-arm"},
              { "arch": "linux/amd64", "arch_name": "amd64" , "machine": "ubuntu-latest"}
            ]
          }'
          MATRIX_JSON=$(jq -c <<< $MATRIX_JSON)
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}

  build:
    runs-on: ubuntu-latest

    needs: matrix

    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: academy
          POSTGRES_USER: academy
          POSTGRES_DB: "postgres"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Call action
      uses: ./.github/actions/maven_build

    - name: Call action
      uses: ./.github/actions/docker_build
      with:
        tag_name: $tag_name
        image_name: $image_name
      
    - name: save docker image
      run: |
        docker save -o $image_name.tar $image_name:$tag_name
    
    - uses: actions/upload-artifact@v4
      with:
        name: $artifact_name
        path: "${{ env.image_name }}.tar"

  push:
    runs-on: ubuntu-latest
    needs: 
      - build
      - matrix
    
    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}

    environment: ${{ inputs.environment }} 

    steps:
    - uses: actions/checkout@v4
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: $artifact_name
    
    - name: Load Docker Image
      run: |
        docker load -i $image_name.tar

    - name: List Docker Images
      run: |
        docker image ls

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker Push
      uses: ./.github/actions/docker_push 
      with:
        docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
        docker_image: $image_name:$tag_name